// structs
type Proposal = record {
    description: text;
    approve: nat32;
    reject: nat32;
    pass: nat32;
    is_active: bool;
    voted: vec principal;
    owner: principal;
};

type CreateProposal = record {
    description: text;
    is_active: bool;
};


// enums
type Result = variant {
    Ok;
    Err: VoteError;
};

type Choice = variant {
    Approve;
    Reject;
    Pass;
};

type VoteError = variant {
    AlreadyVoted;
    ProposalIsNotActive;
    NoSuchProposal;
    AccessRejected;
    UpdateError;
};

// functions
service: {
    "get_proposal": (nat64) -> (opt Proposal) query;
    "get_proposal_count": () -> (nat64) query;
    "create_proposal": (nat64, CreateProposal) -> (opt Proposal);
    "edit_proposal": (nat64, CreateProposal) -> (Result);
    "end_proposal": (nat64) -> (Result);
    "vote": (nat64, Choice) -> (Result);
};